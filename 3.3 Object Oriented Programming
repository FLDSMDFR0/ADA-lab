#include <iostream>
using namespace std;

class CVector
{
  private:
    //int *m_pVect, // Pointer to the buffer
    int m_nCount, // Control how many elements are actually used
    m_nMax, // Control how many are allocated as maximum
    m_nDelta; // To control the growing
    void Init(int delta); // Init our private variables, etc
    void Resize(); // Resize the vector when occurs an overflow

  public:
    int *m_pVect;
    CVector(int delta = 10)// Constructor
    {
      m_nCount = 0;
      m_nMax = delta;
      m_nDelta = delta;
      m_pVect = new int[m_nMax];
    }
    void Insert(int elem); // Insert a new element
    // More methods go here
};

void CVector::Resize()
{
    m_nMax += m_nDelta;
    int *newVect = new int[m_nMax];
    for (int i = 0; i < m_nCount; ++i)
    {
        newVect[i] = m_pVect[i];
    }
    delete[] m_pVect;
    m_pVect = newVect;
}

void CVector::Insert(int elem)
{
  if( m_nCount == m_nMax ) // Verify the overflow
    Resize(); // Resize the vector before inserting elem
  m_pVect[m_nCount++] = elem; // Insert the element at the end
}

int main()
{
  CVector v; // Create an instance of CVector with default delta
  v.Insert(5);
  v.Insert(10);
  v.Insert(15);

  cout << v.m_pVect[0] << endl;
  cout << v.m_pVect[1] << endl;
  cout << v.m_pVect[2] << endl;
  cout << v.m_pVect[3] << endl;
  delete[] v.m_pVect; // Don't forget to free the memory
  return 0;
}
