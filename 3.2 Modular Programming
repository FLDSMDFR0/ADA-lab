#include <iostream>
using namespace std;

struct Vector
{
    int *m_pVect, // Pointer to the buffer
    m_nCount,    // Control how many elements are actually used
    m_nMax,      // Control how many are allocated as maximum
    m_nDelta;    // To control the growing
};

void Resize(Vector *pThis)
{
    int *pTemp, i;
    pTemp = new int[pThis->m_nMax + pThis->m_nDelta]; // Alloc a new vector
    for (i = 0; i < pThis->m_nMax; i++) // Transfer the elements
        pTemp[i] = pThis->m_pVect[i];    // we can also use the function memcpy
    delete[] pThis->m_pVect;              // delete the old vector
    pThis->m_pVect = pTemp;

    // The Max has to be increased by delta
    pThis->m_nMax += pThis->m_nDelta;
}

void Insert(Vector *pThis, int elem)
{
    if (pThis->m_nCount == pThis->m_nMax) // Verify the overflow
        Resize(pThis);                     // Resize the vector before inserting elem
    // Insert the element at the end of the sequence

    pThis->m_pVect[pThis->m_nCount++] = elem;
}

int main()
{
    Vector v;
    v.m_nCount = 0;
    v.m_nMax = 10;      // Initialize m_nMax to some initial value
    v.m_nDelta = 10;    // Initialize m_nDelta to some initial value
    v.m_pVect = new int[v.m_nMax]; // Allocate memory for the initial buffer
  
    Insert(&v, 10);
    Insert(&v, 20);

    cout << v.m_pVect[0] << endl;
    cout << v.m_pVect[1] << endl;

    delete[] v.m_pVect; // Don't forget to free the memory
    return 0;
}
